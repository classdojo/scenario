// Generated by CoffeeScript 1.6.3
(function() {
  var EventEmitter, Resolver, oWrap, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  _ = require("underscore");

  oWrap = require("owrap");

  Resolver = (function(_super) {
    __extends(Resolver, _super);

    function Resolver(__scenarios, __documents, __factories, __factoryDecorators) {
      this.__scenarios = __scenarios;
      this.__documents = __documents;
      this.__factories = __factories;
      this.__factoryDecorators = __factoryDecorators;
      this._configureOWrapResolvers();
    }

    Resolver.prototype.resolve = function(scenarioName) {
      var cont, loadFixtures, s, scenario, _i, _len, _ref, _results,
        _this = this;
      scenario = this.__scenarios[scenarioName];
      if (scenario == null) {
        return;
      }
      if (scenario.$type != null) {
        return this.emit('data', this.__owrap.scenario.resolve(scenario));
      } else {
        loadFixtures = function() {
          var data, fixtures, k, _results;
          _results = [];
          for (k in scenario) {
            fixtures = scenario[k];
            if (!_.isArray(fixtures)) {
              fixtures = fixtures.split(',');
            }
            data = _.map(fixtures, function(e) {
              return _this.__documents[e];
            });
            _results.push(_this.emit('data', data));
          }
          return _results;
        };
        if ((scenario.$scenarios != null) && !_.isEmpty(scenario.$scenarios)) {
          cont = _.after(scenario.$scenarios.length, function() {
            return finish();
          });
          _ref = scenario.$scenarios;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i += 1) {
            s = _ref[_i];
            if (this.__scenarios[s] != null) {
              _results.push(this.resolve(s, cont));
            } else {
              _results.push(loadFixtures());
            }
          }
          return _results;
        } else {
          return loadFixtures();
        }
      }
    };

    Resolver.prototype._configureOWrapResolvers = function() {
      this.__owrap = {};
      this.__owrap.document = oWrap();
      this.__owrap.document.on("field:_id", function(val) {
        if (_.isString(val)) {
          val = ObjectID(val);
        }
        return val;
      });
      this.__owrap.document.on("control:$type", function(obj) {
        if (obj.$type.match(/ObjectID/)) {
          obj = ObjectID(obj.data);
        }
        return obj;
      });
      this.__owrap.scenario = oWrap();
      return this.__owrap.scenario.on("control:$type", function(obj) {
        if (obj.$type.match(/factory/)) {
          console.log("Resolving scenario...", obj);
          return obj;
        } else {
          return obj;
        }
      });
    };

    return Resolver;

  })(EventEmitter);

  module.exports = Resolver;

}).call(this);
