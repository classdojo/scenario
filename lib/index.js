// Generated by CoffeeScript 1.6.3
(function() {
  var DB, Directory, MongoDb, ObjectID, Scenario, utils, _;

  utils = require("../utils");

  Directory = utils.directory;

  MongoDb = require('mongodb');

  ObjectID = require('mongodb').ObjectID;

  _ = require("underscore");

  DB = (function() {
    function DB(__settings) {
      this.__settings = __settings;
      this.__client = MongoDb.MongoClient;
    }

    DB.prototype.connect = function(callback) {
      var _this = this;
      return this.__client.connect(utils.connectionString(this.__settings), function(err, db) {
        if (err != null) {
          return callback(err);
        } else {
          _this.__db = db;
          return callback(null);
        }
      });
    };

    return DB;

  })();

  Scenario = (function() {
    function Scenario() {}

    Scenario.prototype.configure = function(config) {
      this.config = config;
      this.__db = new DB(this.config.dbSettings);
      this.__fixtures = this._loadFiles(this.config.fixtures);
      this.__scenarios = require(this.config.scenarios);
      this.__connected = false;
      return this;
    };

    Scenario.prototype.load = function(scenario, callback) {
      this._loadScenario(this.__scenarios[scenario], callback);
      return this;
    };

    Scenario.prototype.unload = function() {};

    Scenario.prototype.connect = function(callback) {
      var _this = this;
      callback = callback.bind(this);
      if (this.__connected) {
        return callback(null);
      } else {
        return this.__db.connect(function(err) {
          if (err == null) {
            _this.__connected = true;
          }
          return callback(err);
        });
      }
    };

    Scenario.prototype._loadFiles = function(dir) {
      return Directory(this._fullPath(dir)).map('name', function(n) {
        n = n.split('/').pop();
        return n.split('.').shift();
      }).load();
    };

    Scenario.prototype._loadScenario = function(scenario, callback) {
      var data, fixture, fixtures, k, s, _i, _j, _len, _len1;
      if (scenario.$scenarios != null) {
        for (_i = 0, _len = scenario.length; _i < _len; _i++) {
          s = scenario[_i];
          this._loadScenario(s);
        }
      }
      for (k in scenario) {
        fixtures = scenario[k];
        if (!_.isArray(fixtures)) {
          fixtures = fixtures.split(',');
        }
        for (_j = 0, _len1 = fixtures.length; _j < _len1; _j++) {
          fixture = fixtures[_j];
          data = this.__fixtures[k][fixture];
          if (data._id != null) {
            data._id = ObjectID(data._id);
          }
        }
      }
      return callback(null);
    };

    Scenario.prototype._fullPath = function(dir) {
      if (dir.match(/^\./)) {
        return __dirname + "/" + dir;
      } else {
        return dir;
      }
    };

    return Scenario;

  })();

  module.exports = Scenario;

}).call(this);
