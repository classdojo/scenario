// Generated by CoffeeScript 1.6.3
(function() {
  var DB, Directory, Documents, MongoDb, ObjectID, Resolver, Scenario, Walk, oWrap, utils, _;

  utils = require("../utils");

  Directory = utils.directory;

  Walk = utils.walk;

  MongoDb = require('mongodb');

  ObjectID = require('mongodb').ObjectID;

  _ = require("underscore");

  oWrap = require("owrap");

  Documents = require("./documents");

  Resolver = require("./resolver");

  DB = (function() {
    function DB(__settings) {
      this.__settings = __settings;
      this.__client = MongoDb.MongoClient;
    }

    DB.prototype.connect = function(callback) {
      var _this = this;
      return this.__client.connect(utils.connectionString(this.__settings), function(err, db) {
        if (err != null) {
          return callback(err);
        } else {
          _this.__db = db;
          return callback(null);
        }
      });
    };

    DB.prototype.save = function(collection, docs, callback) {
      return this.__db.collection(collection).insert(docs, {
        safe: true
      }, callback);
    };

    DB.prototype.remove = function(collection, callback) {
      var _this = this;
      return this.__db.collection(collection, function(err, c) {
        if (err != null) {
          return callback(err);
        } else {
          return c.remove({
            _id: {
              $exists: true
            }
          }, callback);
        }
      });
    };

    return DB;

  })();

  Scenario = (function() {
    function Scenario() {
      this.__owrap = {};
      this._configDocumentResolver();
      this._configScenarioResolver();
      this.__fixtureSteps = {};
      this.__connected = false;
      return this;
    }

    Scenario.prototype.configure = function(__config, callback) {
      var _this = this;
      this.__config = __config;
      this.__db = new DB(this.__config.dbSettings);
      this.__scenarios = require(this.__config.scenarios);
      return this._loadFiles(this.__config.fixtures, function(err, __fixtures) {
        _this.__fixtures = __fixtures;
        if (err != null) {
          return callback(err);
        } else {
          _this._separateFixturesAndDocuments();
          _this._configScenarioResolver();
          return callback(null, {
            documents: _this.__documents,
            factories: _this.__factories
          });
        }
      });
    };

    Scenario.prototype.load = function(scenario, callback) {
      return this.__resolver.resolve(scenario);
    };

    Scenario.prototype.unload = function(collection, callback) {
      return this.__db.remove(collection, callback);
    };

    Scenario.prototype.registerFixtureStep = function(fixtureName, fn) {
      this.__factoryDecorators[fixtureName] = this.__factoryDecorators[fixtureName] || [];
      return this.__factoryDecorators[fixtureName].push(fn);
    };

    Scenario.prototype.connect = function(callback) {
      var _this = this;
      callback = callback.bind(this);
      if (this.__connected) {
        return callback(null);
      } else {
        return this.__db.connect(function(err) {
          if (err == null) {
            _this.__connected = true;
          }
          return callback(err);
        });
      }
    };

    Scenario.prototype._configScenarioResolver = function() {
      this.__resolver = new Resolver(this.__scenarios, this.__documents, this.__factories, this.__factoryDecorators);
      return this.__resolver.on('data', function(data) {
        return consol.log("Got data from resolver ---", data);
      });
    };

    Scenario.prototype._configDocumentResolver = function() {
      this.__owrap.document = oWrap();
      this.__owrap.document.on("field:_id", function(val) {
        if (_.isString(val)) {
          val = ObjectID(val);
        }
        return val;
      });
      return this.__owrap.document.on("control:$type", function(obj) {
        if (obj.$type.match(/ObjectID/)) {
          obj = ObjectID(obj.data);
        }
        return obj;
      });
    };

    Scenario.prototype._configScenarioResolver = function() {};

    /*
      Separates an object like
      {
        users: {
          user1: {},
          user2: {},
          factory: {
            factory1: {},
            factory2: {}
          }
        }
      }
    
      into a documents and factories object.
    */


    Scenario.prototype._separateFixturesAndDocuments = function() {
      var documents, factories, fixtureObj, k, _ref, _results;
      this.__factories = {};
      this.__documents = {};
      _ref = this.__fixtures;
      _results = [];
      for (k in _ref) {
        fixtureObj = _ref[k];
        factories = fixtureObj.factory;
        documents = _.omit(fixtureObj, 'factory');
        _.extend(this.__factories, factories);
        _results.push(_.extend(this.__documents, documents));
      }
      return _results;
    };

    Scenario.prototype._resolve = function(obj) {
      return this.__owrap.resolve(obj);
    };

    Scenario.prototype._loadFiles = function(dir, callback) {
      return this.__documents = new Documents(dir).load(callback);
    };

    Scenario.prototype._fullPath = function(dir) {
      if (dir.match(/^\./)) {
        return __dirname + "/" + dir;
      } else {
        return dir;
      }
    };

    return Scenario;

  })();

  module.exports = function() {
    return new Scenario();
  };

}).call(this);
